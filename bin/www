#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('poc-stream:server');
const http = require('http');
const NodeMediaServer = require('node-media-server');
const Logger = require('../helpers/logger');
const FileHelper = require('../helpers/fileHelper');

require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Media server
 */

startMediaServer();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


function startMediaServer() {


// Start mediaserver
    const nmsConfig = {
        rtmp: {
            port: process.env.RTMP_PORT,
            chunk_size: process.env.RTMP_CHUNK_SIZE,
            gop_cache: true,
            ping: process.env.RTMP_PING,
            ping_timeout: 60
        },
        http: {
            port: process.env.HTTP_PORT,
            allow_origin: '*'
        }
    };
    // All streams: http://localhost:8000/admin/streams


    const nms = new NodeMediaServer(nmsConfig);
    nms.run();

    nms.on('donePlay', (id, args) => {
        const fh = new FileHelper();
        const sessId = args.replace('/live/', '');

        Logger.info('Ended stream with session ID ' + sessId);

        if (typeof sessId === 'undefined') {
            Logger.error('Session ID could not be found');
        }

        // Empty the playlists so FFmpeg will end
        fh.changeFileContents(global.rootDirectory + '/video/' + sessId + '.txt', '');
        fh.changeFileContents(global.rootDirectory + '/video/' + sessId + '_playlist.txt', '');

        // Prepare questionnaire for removal
        app.get('questionnaire_' + sessId).needsRemoval = true;
    });
}